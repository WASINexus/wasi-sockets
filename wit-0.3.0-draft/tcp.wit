@since(version = 0.3.0)
interface tcp {
    @since(version = 0.3.0)
    use wasi:clocks/monotonic-clock@0.3.0.{duration};
    @since(version = 0.3.0)
    use network.{error-code, ip-socket-address, ip-address-family};

    /// A TCP connection resource
    ///
    /// The connection is used to transmit and receive data.
    @since(version = 0.3.0)
    resource tcp-connection {
        /// Transmit data to peer.
        ///
        /// The caller should close the stream when it has no more data to send
        /// to the peer. Under normal circumstances this will cause a FIN packet
        /// to be sent. Closing the stream is equivalent to calling
        /// `shutdown(SHUT_WR)` in POSIX.
        ///
        /// This function may be called at most once and returns once the full
        /// contents of the stream are transmitted or an error is encountered.
        @since(version = 0.3.0)
        send: func(data: stream<u8>) -> result<_, error-code>;

        /// Read data from peer.
        ///
        /// This function fails if `read` was already called before on this connection.
        ///
        /// On sucess, this function returns a stream and a future, which will resolve
        /// to an error code if receiving data from stream fails.
        /// The returned future resolves to success if receiving side of the connection is closed.
        ///
        /// If the caller is not expecting to receive any data from the peer,
        /// they may cancel the receive task. Any data still in the receive queue
        /// will be discarded. This is equivalent to calling `shutdown(SHUT_RD)`
        /// in POSIX.
        @since(version = 0.3.0)
        receive: func() -> result<tuple<stream<u8>, future<result<_, error-code>>>>;
    }
    
    /// A TCP socket resource.
    ///
    /// The socket can be in one of the following states:
    /// - `unbound`
    /// - `bound` (See note below)
    /// - `listening`
    /// - `connecting`
    /// - `connected`
    /// - `closed`
    /// See <https://github.com/WebAssembly/wasi-sockets/blob/main/TcpSocketOperationalSemantics.md>
    /// for more information.
    ///
    /// Note: Except where explicitly mentioned, whenever this documentation uses
    /// the term "bound" without backticks it actually means: in the `bound` state *or higher*.
    /// (i.e. `bound`, `listening`, `connecting` or `connected`)
    ///
    /// In addition to the general error codes documented on the
    /// `network::error-code` type, TCP socket methods may always return
    /// `error(invalid-state)` when in the `closed` state.
    @since(version = 0.3.0)
    resource tcp-socket {

        /// Create a new TCP socket.
        ///
        /// Similar to `socket(AF_INET or AF_INET6, SOCK_STREAM, IPPROTO_TCP)` in POSIX.
        /// On IPv6 sockets, IPV6_V6ONLY is enabled by default and can't be configured otherwise.
        ///
        /// Unlike POSIX, WASI sockets have no notion of a socket-level
        /// `O_NONBLOCK` flag. Instead they fully rely on the Component Model's
        /// async support.
        ///
        /// # References
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>
        /// - <https://man7.org/linux/man-pages/man2/socket.2.html>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketw>
        /// - <https://man.freebsd.org/cgi/man.cgi?query=socket&sektion=2>
        @since(version = 0.3.0)
        constructor(address-family: ip-address-family);

        /// Bind the socket to the provided IP address and port.
        ///
        /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
        /// network interface(s) to bind to.
        /// If the TCP/UDP port is zero, the socket will be bound to a random free port.
        ///
        /// Bind can be attempted multiple times on the same socket, even with
        /// different arguments on each iteration. But never concurrently and
        /// only as long as the previous bind failed. Once a bind succeeds, the
        /// binding can't be changed anymore.
        ///
        /// # Typical errors
        /// - `invalid-argument`:          The `local-address` has the wrong address family. (EAFNOSUPPORT, EFAULT on Windows)
        /// - `invalid-argument`:          `local-address` is not a unicast address. (EINVAL)
        /// - `invalid-argument`:          `local-address` is an IPv4-mapped IPv6 address. (EINVAL)
        /// - `invalid-state`:             The socket is already bound. (EINVAL)
        /// - `address-in-use`:            No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)
        /// - `address-in-use`:            Address is already in use. (EADDRINUSE)
        /// - `address-not-bindable`:      `local-address` is not an address that can be bound to. (EADDRNOTAVAIL)
        /// 
        /// # Implementors note
        /// When binding to a non-zero port, this bind operation shouldn't be affected by the TIME_WAIT
        /// state of a recently closed socket on the same local address. In practice this means that the SO_REUSEADDR 
        /// socket option should be set implicitly on all platforms, except on Windows where this is the default behavior
        /// and SO_REUSEADDR performs something different entirely.
        ///
        /// # References
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>
        /// - <https://man7.org/linux/man-pages/man2/bind.2.html>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>
        /// - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>
        @since(version = 0.3.0)
        bind: func(local-address: ip-socket-address) -> result<_, error-code>;

        /// Connect to a remote endpoint.
        ///
        /// On success, the socket is transitioned into the `connected` state and this function returns a connection resource.
        ///
        /// After a failed connection attempt, the socket will be in the `closed`
        /// state and the only valid action left is to `drop` the socket. A single
        /// socket can not be used to connect more than once.
        ///
        /// # Typical errors
        /// - `invalid-argument`:          The `remote-address` has the wrong address family. (EAFNOSUPPORT)
        /// - `invalid-argument`:          `remote-address` is not a unicast address. (EINVAL, ENETUNREACH on Linux, EAFNOSUPPORT on MacOS)
        /// - `invalid-argument`:          `remote-address` is an IPv4-mapped IPv6 address. (EINVAL, EADDRNOTAVAIL on Illumos)
        /// - `invalid-argument`:          The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EADDRNOTAVAIL on Windows)
        /// - `invalid-argument`:          The port in `remote-address` is set to 0. (EADDRNOTAVAIL on Windows)
        /// - `invalid-state`:             The socket is already in the `connecting` state. (EALREADY)
        /// - `invalid-state`:             The socket is already in the `connected` state. (EISCONN)
        /// - `invalid-state`:             The socket is already in the `listening` state. (EOPNOTSUPP, EINVAL on Windows)
        /// - `timeout`:                   Connection timed out. (ETIMEDOUT)
        /// - `connection-refused`:        The connection was forcefully rejected. (ECONNREFUSED)
        /// - `connection-reset`:          The connection was reset. (ECONNRESET)
        /// - `connection-aborted`:        The connection was aborted. (ECONNABORTED)
        /// - `remote-unreachable`:        The remote address is not reachable. (EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)
        /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)
        /// # References
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>
        /// - <https://man7.org/linux/man-pages/man2/connect.2.html>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>
        /// - <https://man.freebsd.org/cgi/man.cgi?connect>
        @since(version = 0.3.0)
        connect: func(remote-address: ip-socket-address) -> result<tcp-connection, error-code>;

        /// Start listening return a stream of new inbound connections.
        ///
        /// Transitions the socket into the `listening` state.
        ///
        /// If the socket is not already explicitly bound, this function will
        /// implicitly bind the socket to a random free port.
        ///
        /// The returned sockets are bound and in the `connected` state.
        /// The following properties are inherited from the listener socket:
        /// - `address-family`
        /// - `keep-alive-enabled`
        /// - `keep-alive-idle-time`
        /// - `keep-alive-interval`
        /// - `keep-alive-count`
        /// - `hop-limit`
        /// - `receive-buffer-size`
        /// - `send-buffer-size`
        ///
        /// # Typical errors
        /// - `invalid-state`:             The socket is already in the `connected` state. (EISCONN, EINVAL on BSD)
        /// - `invalid-state`:             The socket is already in the `listening` state.
        /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE)
        ///
        /// # References
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/listen.html>
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/accept.html>
        /// - <https://man7.org/linux/man-pages/man2/listen.2.html>
        /// - <https://man7.org/linux/man-pages/man2/accept.2.html>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>
        /// - <https://man.freebsd.org/cgi/man.cgi?query=listen&sektion=2>
        /// - <https://man.freebsd.org/cgi/man.cgi?query=accept&sektion=2>
        @since(version = 0.3.0)
        listen: func() -> result<stream<tuple<tcp-socket, tcp-connection>>, error-code>;

        /// Get the bound local address.
        ///
        /// POSIX mentions:
        /// > If the socket has not been bound to a local name, the value
        /// > stored in the object pointed to by `address` is unspecified.
        ///
        /// WASI is stricter and requires `local-address` to return `invalid-state` when the socket hasn't been bound yet.
        ///
        /// # Typical errors
        /// - `invalid-state`: The socket is not bound to any local address.
        ///
        /// # References
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>
        /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>
        /// - <https://man.freebsd.org/cgi/man.cgi?getsockname>
        @since(version = 0.3.0)
        local-address: func() -> result<ip-socket-address, error-code>;

        /// Get the remote address.
        ///
        /// # Typical errors
        /// - `invalid-state`: The socket is not connected to a remote address. (ENOTCONN)
        ///
        /// # References
        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>
        /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>
        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>
        /// - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>
        @since(version = 0.3.0)
        remote-address: func() -> result<ip-socket-address, error-code>;

        /// Whether the socket is in the `listening` state.
        ///
        /// Equivalent to the SO_ACCEPTCONN socket option.
        @since(version = 0.3.0)
        is-listening: func() -> bool;

        /// Whether this is a IPv4 or IPv6 socket.
        ///
        /// Equivalent to the SO_DOMAIN socket option.
        @since(version = 0.3.0)
        address-family: func() -> ip-address-family;

        /// Hints the desired listen queue size. Implementations are free to ignore this.
        ///
        /// If the provided value is 0, an `invalid-argument` error is returned.
        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
        ///
        /// # Typical errors
        /// - `not-supported`:        (set) The platform does not support changing the backlog size after the initial listen.
        /// - `invalid-argument`:     (set) The provided value was 0.
        /// - `invalid-state`:        (set) The socket is in the `connecting` or `connected` state.
        @since(version = 0.3.0)
        set-listen-backlog-size: func(value: u64) -> result<_, error-code>;

        /// Enables or disables keepalive.
        ///
        /// The keepalive behavior can be adjusted using:
        /// - `keep-alive-idle-time`
        /// - `keep-alive-interval`
        /// - `keep-alive-count`
        /// These properties can be configured while `keep-alive-enabled` is false, but only come into effect when `keep-alive-enabled` is true.
        ///
        /// Equivalent to the SO_KEEPALIVE socket option.
        @since(version = 0.3.0)
        keep-alive-enabled: func() -> result<bool, error-code>;
        @since(version = 0.3.0)
        set-keep-alive-enabled: func(value: bool) -> result<_, error-code>;

        /// Amount of time the connection has to be idle before TCP starts sending keepalive packets.
        ///
        /// If the provided value is 0, an `invalid-argument` error is returned.
        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
        /// I.e. after setting a value, reading the same setting back may return a different value.
        ///
        /// Equivalent to the TCP_KEEPIDLE socket option. (TCP_KEEPALIVE on MacOS)
        ///
        /// # Typical errors
        /// - `invalid-argument`:     (set) The provided value was 0.
        @since(version = 0.3.0)
        keep-alive-idle-time: func() -> result<duration, error-code>;
        @since(version = 0.3.0)
        set-keep-alive-idle-time: func(value: duration) -> result<_, error-code>;

        /// The time between keepalive packets.
        ///
        /// If the provided value is 0, an `invalid-argument` error is returned.
        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
        /// I.e. after setting a value, reading the same setting back may return a different value.
        ///
        /// Equivalent to the TCP_KEEPINTVL socket option.
        ///
        /// # Typical errors
        /// - `invalid-argument`:     (set) The provided value was 0.
        @since(version = 0.3.0)
        keep-alive-interval: func() -> result<duration, error-code>;
        @since(version = 0.3.0)
        set-keep-alive-interval: func(value: duration) -> result<_, error-code>;

        /// The maximum amount of keepalive packets TCP should send before aborting the connection.
        ///
        /// If the provided value is 0, an `invalid-argument` error is returned.
        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
        /// I.e. after setting a value, reading the same setting back may return a different value.
        ///
        /// Equivalent to the TCP_KEEPCNT socket option.
        ///
        /// # Typical errors
        /// - `invalid-argument`:     (set) The provided value was 0.
        @since(version = 0.3.0)
        keep-alive-count: func() -> result<u32, error-code>;
        @since(version = 0.3.0)
        set-keep-alive-count: func(value: u32) -> result<_, error-code>;

        /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
        ///
        /// If the provided value is 0, an `invalid-argument` error is returned.
        ///
        /// # Typical errors
        /// - `invalid-argument`:     (set) The TTL value must be 1 or higher.
        @since(version = 0.3.0)
        hop-limit: func() -> result<u8, error-code>;
        @since(version = 0.3.0)
        set-hop-limit: func(value: u8) -> result<_, error-code>;

        /// The kernel buffer space reserved for sends/receives on this socket.
        ///
        /// If the provided value is 0, an `invalid-argument` error is returned.
        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
        /// I.e. after setting a value, reading the same setting back may return a different value.
        ///
        /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
        ///
        /// # Typical errors
        /// - `invalid-argument`:     (set) The provided value was 0.
        @since(version = 0.3.0)
        receive-buffer-size: func() -> result<u64, error-code>;
        @since(version = 0.3.0)
        set-receive-buffer-size: func(value: u64) -> result<_, error-code>;
        @since(version = 0.3.0)
        send-buffer-size: func() -> result<u64, error-code>;
        @since(version = 0.3.0)
        set-send-buffer-size: func(value: u64) -> result<_, error-code>;
    }
}
